<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>郭毅的博客</title>
  
  <subtitle>一个分享技术，生活的空间</subtitle>
  <link href="http://codedetermination.github.io/atom.xml" rel="self"/>
  
  <link href="http://codedetermination.github.io/"/>
  <updated>2021-04-30T02:48:48.695Z</updated>
  <id>http://codedetermination.github.io/</id>
  
  <author>
    <name>郭毅</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>思考与感悟</title>
    <link href="http://codedetermination.github.io/2021/04/30/blog4/"/>
    <id>http://codedetermination.github.io/2021/04/30/blog4/</id>
    <published>2021-04-30T02:35:40.000Z</published>
    <updated>2021-04-30T02:48:48.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="最近的思考与感悟"><a href="#最近的思考与感悟" class="headerlink" title="最近的思考与感悟"></a>最近的思考与感悟</h3><p>最近进行了期中考试，我之前没有怎么学习，经历了三天的紧张的复习，虽然感觉掌握了大部分的知识，但是考试的结果貌似还是不那么尽如人意。考高分不是我最终的目的，学会才是我最重要的目的，考试督促了我的学习，也让我拨乱反正，最近我的状态很不错，没有了对前途迷茫的焦虑，也没有了对自身怀疑的那种痛苦，现在最多的就是对未来的希望，和对自己的自信。<br>最近也有一些教训需要吸取：</p><ol><li>不要在寝室呆很长时间，以后要把大多数时间放在图书馆上面的实验室</li><li>好好对待自己热爱的事情，比如机器人，一直做下去做深入，从理论到算法</li><li>学会取舍，不要去碰一些对自己没用的事情，不要花经历在一些没有意义的事情</li><li>不要攀比，多在自己的身上寻找问题的所在，坚持自己做好的事情，不要和别人拥挤在一个赛道</li><li>多走出舒适区，认识到自己的能力，学习要投入</li><li>对待游戏，适度，但不等于不碰，适当释放压力</li><li>对待别人要礼貌，亲切</li><li>多看书籍去学习，少看视频</li><li>少看知乎，避免情绪输出。</li></ol><p>最近的目标：5月9日之前弄完科创杯，顺便做一些6月份中期答辩的时候的准备，这个项目一个人做就足够了，不要害怕别人超过你，牛就要不断努力，而不是鹤立鸡群，大家一起学习进步，心态一定要摆到正确的位置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;最近的思考与感悟&quot;&gt;&lt;a href=&quot;#最近的思考与感悟&quot; class=&quot;headerlink&quot; title=&quot;最近的思考与感悟&quot;&gt;&lt;/a&gt;最近的思考与感悟&lt;/h3&gt;&lt;p&gt;最近进行了期中考试，我之前没有怎么学习，经历了三天的紧张的复习，虽然感觉掌握了大部分的知识，</summary>
      
    
    
    
    
    <category term="人生与理想" scheme="http://codedetermination.github.io/tags/%E4%BA%BA%E7%94%9F%E4%B8%8E%E7%90%86%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>numpy的使用</title>
    <link href="http://codedetermination.github.io/2021/04/11/numpy0/"/>
    <id>http://codedetermination.github.io/2021/04/11/numpy0/</id>
    <published>2021-04-11T14:12:54.000Z</published>
    <updated>2021-04-11T14:32:45.673Z</updated>
    
    <content type="html"><![CDATA[<h1 id="numpy的使用"><a href="#numpy的使用" class="headerlink" title="numpy的使用"></a>numpy的使用</h1><h3 id="numpy的主要对象是ndarray，他是一个快速灵活的容器"><a href="#numpy的主要对象是ndarray，他是一个快速灵活的容器" class="headerlink" title="numpy的主要对象是ndarray，他是一个快速灵活的容器"></a>numpy的主要对象是ndarray，他是一个快速灵活的容器</h3><h2 id="1-从数组创建numpy对象"><a href="#1-从数组创建numpy对象" class="headerlink" title="1.从数组创建numpy对象"></a>1.从数组创建numpy对象</h2><pre class=" language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h2 id="2-快速创建数组的方式"><a href="#2-快速创建数组的方式" class="headerlink" title="2.快速创建数组的方式"></a>2.快速创建数组的方式</h2><pre class=" language-python"><code class="language-python">np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个全零的数组</span>np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个全为1的数组</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个1到10，差为2的等差数列，数量由公差确定</span>np<span class="token punctuation">.</span>linespace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建一个1到19，长度为4的数组</span></code></pre><h2 id="3-数组之间相互转化"><a href="#3-数组之间相互转化" class="headerlink" title="3.数组之间相互转化"></a>3.数组之间相互转化</h2><pre class=" language-python"><code class="language-python">例如之前已经创建了arr进行类型转换只需要arr<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>对应的type<span class="token punctuation">)</span>数组之间进行切片转化操作arr<span class="token punctuation">[</span>行切片索引<span class="token punctuation">,</span>列切片索引<span class="token punctuation">]</span></code></pre><h2 id="4-基本数组运算"><a href="#4-基本数组运算" class="headerlink" title="4.基本数组运算"></a>4.基本数组运算</h2><pre class=" language-python"><code class="language-python">arr <span class="token operator">+</span> arr2arr1 <span class="token operator">*</span> arr2arr <span class="token operator">**</span> <span class="token number">2</span>类似的还有除和减，以及乘方</code></pre><h3 id="arr对应的一些数学统计使用方法"><a href="#arr对应的一些数学统计使用方法" class="headerlink" title="arr对应的一些数学统计使用方法"></a>arr对应的一些数学统计使用方法</h3><table><thead><tr><th align="left">对应的方法</th><th align="left">对应的用途</th></tr></thead><tbody><tr><td align="left">sum</td><td align="left">求和</td></tr><tr><td align="left">mean</td><td align="left">平均值</td></tr><tr><td align="left">std,var</td><td align="left">标准差，方差</td></tr><tr><td align="left">min，max</td><td align="left">最大值，最小值</td></tr><tr><td align="left">argmin，argmax</td><td align="left">对应的最大最小值索引</td></tr><tr><td align="left">cumsun，cumprod</td><td align="left">所有元素累积和和累积乘积</td></tr></tbody></table><h3 id="也可以自己定义函数，传入ndarray中"><a href="#也可以自己定义函数，传入ndarray中" class="headerlink" title="也可以自己定义函数，传入ndarray中"></a>也可以自己定义函数，传入ndarray中</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">**</span><span class="token number">2</span>f<span class="token punctuation">(</span>arr<span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;numpy的使用&quot;&gt;&lt;a href=&quot;#numpy的使用&quot; class=&quot;headerlink&quot; title=&quot;numpy的使用&quot;&gt;&lt;/a&gt;numpy的使用&lt;/h1&gt;&lt;h3 id=&quot;numpy的主要对象是ndarray，他是一个快速灵活的容器&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="python包使用" scheme="http://codedetermination.github.io/tags/python%E5%8C%85%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>人生的思考与感悟(一)</title>
    <link href="http://codedetermination.github.io/2021/04/11/blog3/"/>
    <id>http://codedetermination.github.io/2021/04/11/blog3/</id>
    <published>2021-04-10T17:27:19.000Z</published>
    <updated>2021-04-10T17:51:59.118Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在前面，最近经历了很多次心理斗争，也总结了不少经验教训，与其在不断试错中亦步亦趋，不如从现在开始总结反思，不断成长，让自己内心更加宁静和强大！特意创建这个专栏，不定期更新，相信每一次更新都是一次成长。"><a href="#写在前面，最近经历了很多次心理斗争，也总结了不少经验教训，与其在不断试错中亦步亦趋，不如从现在开始总结反思，不断成长，让自己内心更加宁静和强大！特意创建这个专栏，不定期更新，相信每一次更新都是一次成长。" class="headerlink" title="写在前面，最近经历了很多次心理斗争，也总结了不少经验教训，与其在不断试错中亦步亦趋，不如从现在开始总结反思，不断成长，让自己内心更加宁静和强大！特意创建这个专栏，不定期更新，相信每一次更新都是一次成长。"></a>写在前面，最近经历了很多次心理斗争，也总结了不少经验教训，与其在不断试错中亦步亦趋，不如从现在开始总结反思，不断成长，让自己内心更加宁静和强大！特意创建这个专栏，不定期更新，相信每一次更新都是一次成长。</h3><h3 id="事情要从这学期开始说起，简而言之就是遇到了一次学习方法之间的对撞，外来的学习方法在我这里遇到了水土不服，并且冲击了我原有的已经成理论的学习方式，复杂来说，就是两种人生观的冲突，冲突之中我迷失了，而从中得出的经验教训就是无论什么时候都要坚持自己，适应自己就是最好的，每个人都不一样，不能追求完美，更多是学习达到平衡！"><a href="#事情要从这学期开始说起，简而言之就是遇到了一次学习方法之间的对撞，外来的学习方法在我这里遇到了水土不服，并且冲击了我原有的已经成理论的学习方式，复杂来说，就是两种人生观的冲突，冲突之中我迷失了，而从中得出的经验教训就是无论什么时候都要坚持自己，适应自己就是最好的，每个人都不一样，不能追求完美，更多是学习达到平衡！" class="headerlink" title="事情要从这学期开始说起，简而言之就是遇到了一次学习方法之间的对撞，外来的学习方法在我这里遇到了水土不服，并且冲击了我原有的已经成理论的学习方式，复杂来说，就是两种人生观的冲突，冲突之中我迷失了，而从中得出的经验教训就是无论什么时候都要坚持自己，适应自己就是最好的，每个人都不一样，不能追求完美，更多是学习达到平衡！"></a>事情要从这学期开始说起，简而言之就是遇到了一次学习方法之间的对撞，外来的学习方法在我这里遇到了水土不服，并且冲击了我原有的已经成理论的学习方式，复杂来说，就是两种人生观的冲突，冲突之中我迷失了，而从中得出的经验教训就是无论什么时候都要坚持自己，适应自己就是最好的，每个人都不一样，不能追求完美，更多是学习达到平衡！</h3><h3 id="谈谈对学习的理解：对于我自己来说，学习是服务于兴趣的，对于所谓的卷文化，我是深恶痛绝的，我认为学习首先应该建立在有用的基础上，并且在宏观上产生正面影响的学习才是真正的学习，我记得一句话对我的影响非常大，并且这句话很有可能道出了学习的真谛：学习不代表你当前学了什么，而是你把这些东西忘了剩下了什么，我不想去批评那些选择去应试，去内卷，去恶性竞争的人，他们可能通过竞争也拿到了自己想要的东西，可能他们更符合社会的主流，我无意评价得失与好坏，但是我想劝那些本不是这样，但是受到影响并且把它们奉为真理的人，应该谨慎的审视自己，不要陷入恶性的怪圈！-这是我的一个中肯的建议，在大学里面，成绩只能代表一个部分，你学的是课程的内容思想和方法，而不是学习带来的成绩与区分度，秉持第二种思想，只会让你把学习变为你不断爬升的工具，你不真正爱好它，你也不会真正掌握它，并且由于这种错位可能会导致你对自身价值产生怀疑。正确的学习观应该是学习与兴趣结合，注重生活，完善人格。"><a href="#谈谈对学习的理解：对于我自己来说，学习是服务于兴趣的，对于所谓的卷文化，我是深恶痛绝的，我认为学习首先应该建立在有用的基础上，并且在宏观上产生正面影响的学习才是真正的学习，我记得一句话对我的影响非常大，并且这句话很有可能道出了学习的真谛：学习不代表你当前学了什么，而是你把这些东西忘了剩下了什么，我不想去批评那些选择去应试，去内卷，去恶性竞争的人，他们可能通过竞争也拿到了自己想要的东西，可能他们更符合社会的主流，我无意评价得失与好坏，但是我想劝那些本不是这样，但是受到影响并且把它们奉为真理的人，应该谨慎的审视自己，不要陷入恶性的怪圈！-这是我的一个中肯的建议，在大学里面，成绩只能代表一个部分，你学的是课程的内容思想和方法，而不是学习带来的成绩与区分度，秉持第二种思想，只会让你把学习变为你不断爬升的工具，你不真正爱好它，你也不会真正掌握它，并且由于这种错位可能会导致你对自身价值产生怀疑。正确的学习观应该是学习与兴趣结合，注重生活，完善人格。" class="headerlink" title="谈谈对学习的理解：对于我自己来说，学习是服务于兴趣的，对于所谓的卷文化，我是深恶痛绝的，我认为学习首先应该建立在有用的基础上，并且在宏观上产生正面影响的学习才是真正的学习，我记得一句话对我的影响非常大，并且这句话很有可能道出了学习的真谛：学习不代表你当前学了什么，而是你把这些东西忘了剩下了什么，我不想去批评那些选择去应试，去内卷，去恶性竞争的人，他们可能通过竞争也拿到了自己想要的东西，可能他们更符合社会的主流，我无意评价得失与好坏，但是我想劝那些本不是这样，但是受到影响并且把它们奉为真理的人，应该谨慎的审视自己，不要陷入恶性的怪圈！ 这是我的一个中肯的建议，在大学里面，成绩只能代表一个部分，你学的是课程的内容思想和方法，而不是学习带来的成绩与区分度，秉持第二种思想，只会让你把学习变为你不断爬升的工具，你不真正爱好它，你也不会真正掌握它，并且由于这种错位可能会导致你对自身价值产生怀疑。正确的学习观应该是学习与兴趣结合，注重生活，完善人格。"></a>谈谈对学习的理解：对于我自己来说，学习是服务于兴趣的，对于所谓的卷文化，我是深恶痛绝的，我认为学习首先应该建立在有用的基础上，并且在宏观上产生正面影响的学习才是真正的学习，我记得一句话对我的影响非常大，并且这句话很有可能道出了学习的真谛：<code>学习不代表你当前学了什么，而是你把这些东西忘了剩下了什么</code>，我不想去批评那些选择去应试，去内卷，去恶性竞争的人，他们可能通过竞争也拿到了自己想要的东西，可能他们更符合社会的主流，我无意评价得失与好坏，但是我想劝那些本不是这样，但是受到影响并且把它们奉为真理的人，应该谨慎的审视自己，不要陷入恶性的怪圈！ 这是我的一个中肯的建议，在大学里面，成绩只能代表一个部分，你学的是课程的内容思想和方法，而不是学习带来的成绩与区分度，秉持第二种思想，只会让你把学习变为你不断爬升的工具，你不真正爱好它，你也不会真正掌握它，并且由于这种错位可能会导致你对自身价值产生怀疑。正确的学习观应该是学习与兴趣结合，注重生活，完善人格。</h3><h3 id="并且最后一句话，送给看到的人和自己：坚持自己，获得精彩，脚踏实地，平静愉悦。-要做到热爱生活，热爱学习！！"><a href="#并且最后一句话，送给看到的人和自己：坚持自己，获得精彩，脚踏实地，平静愉悦。-要做到热爱生活，热爱学习！！" class="headerlink" title="并且最后一句话，送给看到的人和自己：坚持自己，获得精彩，脚踏实地，平静愉悦。 要做到热爱生活，热爱学习！！"></a>并且最后一句话，送给看到的人和自己：坚持自己，获得精彩，脚踏实地，平静愉悦。 要做到热爱生活，热爱学习！！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;写在前面，最近经历了很多次心理斗争，也总结了不少经验教训，与其在不断试错中亦步亦趋，不如从现在开始总结反思，不断成长，让自己内心更加宁静和强大！特意创建这个专栏，不定期更新，相信每一次更新都是一次成长。&quot;&gt;&lt;a href=&quot;#写在前面，最近经历了很多次心理斗争，也</summary>
      
    
    
    
    
    <category term="人生与理想" scheme="http://codedetermination.github.io/tags/%E4%BA%BA%E7%94%9F%E4%B8%8E%E7%90%86%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>深度学习与围棋读书笔记1</title>
    <link href="http://codedetermination.github.io/2021/04/10/weiqi0/"/>
    <id>http://codedetermination.github.io/2021/04/10/weiqi0/</id>
    <published>2021-04-10T06:57:01.000Z</published>
    <updated>2021-04-10T15:08:27.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构建一个围棋机器人"><a href="#构建一个围棋机器人" class="headerlink" title="构建一个围棋机器人"></a>构建一个围棋机器人</h1><h2 id="1-表示棋手"><a href="#1-表示棋手" class="headerlink" title="1.表示棋手"></a>1.表示棋手</h2><h3 id="首先继承enum表示棋手类，并且里面还有一个方法，即调用这个方法可以返回另一个棋手的类"><a href="#首先继承enum表示棋手类，并且里面还有一个方法，即调用这个方法可以返回另一个棋手的类" class="headerlink" title="首先继承enum表示棋手类，并且里面还有一个方法，即调用这个方法可以返回另一个棋手的类"></a>首先继承enum表示棋手类，并且里面还有一个方法，即调用这个方法可以返回另一个棋手的类</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> enum<span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    black <span class="token operator">=</span> <span class="token number">1</span>    white <span class="token operator">=</span> <span class="token number">2</span>    @property    <span class="token keyword">def</span> <span class="token function">other</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Player<span class="token punctuation">.</span>black <span class="token keyword">if</span> self <span class="token operator">==</span> Player<span class="token punctuation">.</span>white <span class="token keyword">else</span> Player<span class="token punctuation">.</span>white</code></pre><h3 id="这里为什么可以通过self和一个看似为属性的东西进行比较相等呢？"><a href="#这里为什么可以通过self和一个看似为属性的东西进行比较相等呢？" class="headerlink" title="这里为什么可以通过self和一个看似为属性的东西进行比较相等呢？"></a>这里为什么可以通过self和一个看似为属性的东西进行比较相等呢？</h3><h3 id="其实这里的Player-black并不是一个属性，而是一个类，而self可以代表枚举产生的类，因此，可以通过判断返回另一个棋手的类"><a href="#其实这里的Player-black并不是一个属性，而是一个类，而self可以代表枚举产生的类，因此，可以通过判断返回另一个棋手的类" class="headerlink" title="其实这里的Player.black并不是一个属性，而是一个类，而self可以代表枚举产生的类，因此，可以通过判断返回另一个棋手的类"></a>其实这里的<code>Player.black</code>并不是一个属性，而是一个类，而self可以代表枚举产生的类，因此，可以通过判断返回另一个棋手的类</h3><h2 id="2-表示棋的位置"><a href="#2-表示棋的位置" class="headerlink" title="2.表示棋的位置"></a>2.表示棋的位置</h2><h3 id="这里的point传入一个namedtuple-nametuple就是把一个数组的索引变成了有名字的样子，这里传入了一个空的数组，名字为Point，行列分别为row-col。这里还传入了一个neighbor方法，用来表示周围的格子，为了便于以后计算气数做准备。"><a href="#这里的point传入一个namedtuple-nametuple就是把一个数组的索引变成了有名字的样子，这里传入了一个空的数组，名字为Point，行列分别为row-col。这里还传入了一个neighbor方法，用来表示周围的格子，为了便于以后计算气数做准备。" class="headerlink" title="这里的point传入一个namedtuple,nametuple就是把一个数组的索引变成了有名字的样子，这里传入了一个空的数组，名字为Point，行列分别为row col。这里还传入了一个neighbor方法，用来表示周围的格子，为了便于以后计算气数做准备。"></a>这里的point传入一个<code>namedtuple</code>,nametuple就是把一个数组的索引变成了有名字的样子，这里传入了一个空的数组，名字为<code>Point</code>，行列分别为<code>row col</code>。这里还传入了一个<code>neighbor</code>方法，用来表示周围的格子，为了便于以后计算气数做准备。</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> namedtuple<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token punctuation">(</span>namedtuple<span class="token punctuation">(</span><span class="token string">'Point'</span><span class="token punctuation">,</span> <span class="token string">'row col'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">neighbors</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span>            Point<span class="token punctuation">(</span>self<span class="token punctuation">.</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span>            Point<span class="token punctuation">(</span>self<span class="token punctuation">.</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">,</span>            Point<span class="token punctuation">(</span>self<span class="token punctuation">.</span>row<span class="token punctuation">,</span> self<span class="token punctuation">.</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Point<span class="token punctuation">(</span>self<span class="token punctuation">.</span>row<span class="token punctuation">,</span> self<span class="token punctuation">.</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span></code></pre><h3 id="上面都是gotypes-py里面的内容，用来定义一个棋"><a href="#上面都是gotypes-py里面的内容，用来定义一个棋" class="headerlink" title="上面都是gotypes.py里面的内容，用来定义一个棋"></a>上面都是<code>gotypes.py</code>里面的内容，用来定义一个棋</h3><hr><h3 id="定义了一个棋的基本属性后，我们再来定义行棋中的一些动作，我们用一个Move类来囊括这些动作"><a href="#定义了一个棋的基本属性后，我们再来定义行棋中的一些动作，我们用一个Move类来囊括这些动作" class="headerlink" title="定义了一个棋的基本属性后，我们再来定义行棋中的一些动作，我们用一个Move类来囊括这些动作"></a>定义了一个棋的基本属性后，我们再来定义行棋中的一些动作，我们用一个<code>Move</code>类来囊括这些动作</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Move</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;1></span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token operator">=</span>None<span class="token punctuation">,</span> is_pass<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> is_resign<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token punctuation">(</span>point <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span> <span class="token operator">^</span> is_pass <span class="token operator">^</span> is_resign        self<span class="token punctuation">.</span>point <span class="token operator">=</span> point        self<span class="token punctuation">.</span>is_play <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>point <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>is_pass <span class="token operator">=</span> is_pass        self<span class="token punctuation">.</span>is_resign <span class="token operator">=</span> is_resign    @classmethod    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;2></span>        <span class="token keyword">return</span> Move<span class="token punctuation">(</span>point<span class="token operator">=</span>point<span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">pass_turn</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;3></span>        <span class="token keyword">return</span> Move<span class="token punctuation">(</span>is_pass<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">resign</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;4></span>        <span class="token keyword">return</span> Move<span class="token punctuation">(</span>is_resign<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python">语法知识点补充：    <span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">assert</span>（断言）：    它是一个写python程序时候的好的习惯，在程序不满足条件是及时报错    <span class="token keyword">assert</span>相当于 <span class="token keyword">raise</span><span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">-</span><span class="token operator">not</span><span class="token punctuation">,</span><span class="token keyword">assert</span> 发出的信息为后面跟着的字符串可以通过一个数组来传递，上面的表明如果没有传入一个落子点，就打印出是否投降或者是停一手，因此我们检查程序是否出错。    <span class="token number">2.</span>classmethod<span class="token punctuation">:</span>    类中的classmethod表示不用实例化类，直接用类<span class="token punctuation">.</span>名字就可以调用的意思。</code></pre><h4 id="参考知识链接：-1-断言-2-classmethod"><a href="#参考知识链接：-1-断言-2-classmethod" class="headerlink" title="参考知识链接： 1.断言 2.classmethod"></a>参考知识链接： 1.<a href="https://www.cnblogs.com/liuchunxiao83/p/5298016.html">断言</a> 2.<a href="https://www.runoob.com/python/python-func-classmethod.html">classmethod</a></h4><h3 id="上面将类中的属性和传入的属性进行绑定，并且直接通过Move-args-method来进行一步的操作。"><a href="#上面将类中的属性和传入的属性进行绑定，并且直接通过Move-args-method来进行一步的操作。" class="headerlink" title="上面将类中的属性和传入的属性进行绑定，并且直接通过Move(**args).method来进行一步的操作。"></a>上面将类中的属性和传入的属性进行绑定，并且直接通过<code>Move(**args).method</code>来进行一步的操作。</h3><h2 id="这么做方便了数据类型和游戏逻辑的分离，下面我们开始定义围棋的游戏逻辑"><a href="#这么做方便了数据类型和游戏逻辑的分离，下面我们开始定义围棋的游戏逻辑" class="headerlink" title="这么做方便了数据类型和游戏逻辑的分离，下面我们开始定义围棋的游戏逻辑"></a>这么做方便了数据类型和游戏逻辑的分离，下面我们开始定义围棋的游戏逻辑</h2><hr><h1 id="1-实现围棋棋盘"><a href="#1-实现围棋棋盘" class="headerlink" title="1.实现围棋棋盘"></a>1.实现围棋棋盘</h1><h2 id="1-跟踪相连的棋组（GoString-）"><a href="#1-跟踪相连的棋组（GoString-）" class="headerlink" title="(1)跟踪相连的棋组（GoString()）"></a>(1)跟踪相连的棋组（<code>GoString()</code>）</h2><h3 id="为了不独立检查棋子，节约算力，我们将相连的同色棋子看为一个整体"><a href="#为了不独立检查棋子，节约算力，我们将相连的同色棋子看为一个整体" class="headerlink" title="为了不独立检查棋子，节约算力，我们将相连的同色棋子看为一个整体"></a>为了不独立检查棋子，节约算力，我们将相连的同色棋子看为一个整体</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GoString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;1></span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> color<span class="token punctuation">,</span> stones<span class="token punctuation">,</span> liberties<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>color <span class="token operator">=</span> color        self<span class="token punctuation">.</span>stones <span class="token operator">=</span> set<span class="token punctuation">(</span>stones<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>liberties <span class="token operator">=</span> set<span class="token punctuation">(</span>liberties<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">remove_liberty</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>liberties<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>point<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_liberty</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>liberties<span class="token punctuation">.</span>add<span class="token punctuation">(</span>point<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">merged_with</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> go_string<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;2></span>        <span class="token keyword">assert</span> go_string<span class="token punctuation">.</span>color <span class="token operator">==</span> self<span class="token punctuation">.</span>color        combined_stones <span class="token operator">=</span> self<span class="token punctuation">.</span>stones <span class="token operator">|</span> go_string<span class="token punctuation">.</span>stones        <span class="token keyword">return</span> GoString<span class="token punctuation">(</span>            self<span class="token punctuation">.</span>color<span class="token punctuation">,</span>            combined_stones<span class="token punctuation">,</span>            <span class="token punctuation">(</span>self<span class="token punctuation">.</span>liberties <span class="token operator">|</span> go_string<span class="token punctuation">.</span>liberties<span class="token punctuation">)</span> <span class="token operator">-</span> combined_stones<span class="token punctuation">)</span>    @property    <span class="token keyword">def</span> <span class="token function">num_liberties</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>liberties<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> isinstance<span class="token punctuation">(</span>other<span class="token punctuation">,</span> GoString<span class="token punctuation">)</span> <span class="token operator">and</span> \            self<span class="token punctuation">.</span>color <span class="token operator">==</span> other<span class="token punctuation">.</span>color <span class="token operator">and</span> \            self<span class="token punctuation">.</span>stones <span class="token operator">==</span> other<span class="token punctuation">.</span>stones <span class="token operator">and</span> \            self<span class="token punctuation">.</span>liberties <span class="token operator">==</span> other<span class="token punctuation">.</span>liberties</code></pre><pre class=" language-python"><code class="language-python">语法知识补充：    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    返回一个布尔值，来表示两个值是否相等，这里返回两个属性这些所有属性是否相等！    <span class="token punctuation">(</span>self<span class="token punctuation">.</span>liberties <span class="token operator">|</span> go_string<span class="token punctuation">.</span>liberties<span class="token punctuation">)</span> <span class="token operator">-</span> combined_stones<span class="token punctuation">)</span>    看到这一句很多小伙伴和我一样，可能会有一点蒙，按照我最初的思路，可以得到列表self<span class="token punctuation">.</span>liberties，go_string<span class="token punctuation">.</span>liberties，combined_stones这几个都是列表，怎么可以进行这些操作呢？    看来大家都和我一样，忽视了很重要的一点：    self<span class="token punctuation">.</span>stones <span class="token operator">=</span> set<span class="token punctuation">(</span>stones<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>liberties <span class="token operator">=</span> set<span class="token punctuation">(</span>liberties<span class="token punctuation">)</span>    这里两句表明我们忽视了这是一个集合类的事实！    因此这里<span class="token operator">|</span>表示并集    而<span class="token operator">-</span>表示差集</code></pre><h3 id="init-中表明了一个棋链应该具有的属性："><a href="#init-中表明了一个棋链应该具有的属性：" class="headerlink" title="__init__中表明了一个棋链应该具有的属性："></a><code>__init__</code>中表明了一个棋链应该具有的属性：</h3><h3 id="颜色-包含的棋子-以及这个棋链具有的气-特别的无相连棋子的单个棋子也看做为棋链"><a href="#颜色-包含的棋子-以及这个棋链具有的气-特别的无相连棋子的单个棋子也看做为棋链" class="headerlink" title="颜色 包含的棋子 以及这个棋链具有的气 特别的无相连棋子的单个棋子也看做为棋链"></a>颜色 包含的棋子 以及这个棋链具有的气 特别的无相连棋子的单个棋子也看做为棋链</h3><h3 id="气数和棋子在同一位置有且只能有一个有意义因此用set来表示去除重复的一些内容，显然这里的包含的棋子和所拥有的气数应该是一个具有多个棋或者数意义的东西"><a href="#气数和棋子在同一位置有且只能有一个有意义因此用set来表示去除重复的一些内容，显然这里的包含的棋子和所拥有的气数应该是一个具有多个棋或者数意义的东西" class="headerlink" title="气数和棋子在同一位置有且只能有一个有意义因此用set来表示去除重复的一些内容，显然这里的包含的棋子和所拥有的气数应该是一个具有多个棋或者数意义的东西"></a>气数和棋子在同一位置有且只能有一个有意义因此用<code>set</code>来表示去除重复的一些内容，显然这里的包含的棋子和所拥有的气数应该是一个具有多个棋或者数意义的东西</h3><h3 id="去除增加气数（棋子），也理所当然的可以通过在列表中添加或者删除点来实现，而原有的棋链进行改变后要生成一个新的棋链，棋链可以由棋链增加单个棋，也可以由棋链和棋链之间相加，因此需要有merged-with"><a href="#去除增加气数（棋子），也理所当然的可以通过在列表中添加或者删除点来实现，而原有的棋链进行改变后要生成一个新的棋链，棋链可以由棋链增加单个棋，也可以由棋链和棋链之间相加，因此需要有merged-with" class="headerlink" title="去除增加气数（棋子），也理所当然的可以通过在列表中添加或者删除点来实现，而原有的棋链进行改变后要生成一个新的棋链，棋链可以由棋链增加单个棋，也可以由棋链和棋链之间相加，因此需要有merged_with"></a>去除增加气数（棋子），也理所当然的可以通过在列表中添加或者删除点来实现，而原有的棋链进行改变后要生成一个新的棋链，棋链可以由棋链增加单个棋，也可以由棋链和棋链之间相加，因此需要有<code>merged_with</code></h3><h3 id="两个棋链相结合，先断言进行检查，再将两个数组进行结合，返回一个新的棋链，len用来返回一块棋子的气数，PS：也可以表示一个交叉点的气数，同时返回一个类也相当于直接调用了一个-init-来避免出现重复而导致错误的情况！"><a href="#两个棋链相结合，先断言进行检查，再将两个数组进行结合，返回一个新的棋链，len用来返回一块棋子的气数，PS：也可以表示一个交叉点的气数，同时返回一个类也相当于直接调用了一个-init-来避免出现重复而导致错误的情况！" class="headerlink" title="两个棋链相结合，先断言进行检查，再将两个数组进行结合，返回一个新的棋链，len用来返回一块棋子的气数，PS：也可以表示一个交叉点的气数，同时返回一个类也相当于直接调用了一个__init__来避免出现重复而导致错误的情况！"></a>两个棋链相结合，先断言进行检查，再将两个数组进行结合，返回一个新的棋链，<code>len</code>用来返回一块棋子的气数，PS：也可以表示一个交叉点的气数，同时返回一个类也相当于直接调用了一个<code>__init__</code>来避免出现重复而导致错误的情况！</h3><h2 id="2-棋盘上的提子和落子（Board-定义一个棋盘类）"><a href="#2-棋盘上的提子和落子（Board-定义一个棋盘类）" class="headerlink" title="(2)棋盘上的提子和落子（Board()定义一个棋盘类）"></a>(2)棋盘上的提子和落子（<code>Board()</code>定义一个棋盘类）</h2><h3 id="我们需要一个棋盘类来跟踪和这些的变化，完成合并，增减双方的气，拿掉气尽的棋子的作用-这里对代码进行分块，注意归属于这一序号内的所用内容，都是属于Board-这个类"><a href="#我们需要一个棋盘类来跟踪和这些的变化，完成合并，增减双方的气，拿掉气尽的棋子的作用-这里对代码进行分块，注意归属于这一序号内的所用内容，都是属于Board-这个类" class="headerlink" title="我们需要一个棋盘类来跟踪和这些的变化，完成合并，增减双方的气，拿掉气尽的棋子的作用,这里对代码进行分块，注意归属于这一序号内的所用内容，都是属于Board()这个类"></a>我们需要一个棋盘类来跟踪和这些的变化，完成合并，增减双方的气，拿掉气尽的棋子的作用,这里对代码进行分块，注意归属于这一序号内的所用内容，都是属于<code>Board()</code>这个类</h3><h3 id="a-创建Board-类"><a href="#a-创建Board-类" class="headerlink" title="a. 创建Board()类"></a>a. 创建<code>Board()</code>类</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Board</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_rows<span class="token punctuation">,</span> num_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num_rows <span class="token operator">=</span> num_rows        self<span class="token punctuation">.</span>num_cols <span class="token operator">=</span> num_cols        self<span class="token punctuation">.</span>_grid <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;</span>        <span class="token comment" spellcheck="true"># self._hash = zobrist.EMPTY_BOARD</span></code></pre><h3 id="这里可以看到我们可以改变的围棋的行列的数目"><a href="#这里可以看到我们可以改变的围棋的行列的数目" class="headerlink" title="这里可以看到我们可以改变的围棋的行列的数目"></a>这里可以看到我们可以改变的围棋的行列的数目</h3><h3 id="首先我们定义我们需要使用的方法"><a href="#首先我们定义我们需要使用的方法" class="headerlink" title="首先我们定义我们需要使用的方法"></a>首先我们定义我们需要使用的方法</h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">is_on_grid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> point<span class="token punctuation">.</span>row <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>num_rows <span class="token operator">and</span> \            <span class="token number">1</span> <span class="token operator">&lt;=</span> point<span class="token punctuation">.</span>col <span class="token operator">&lt;=</span> self<span class="token punctuation">.</span>num_cols    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        string <span class="token operator">=</span> self<span class="token punctuation">.</span>_grid<span class="token punctuation">.</span>get<span class="token punctuation">(</span>point<span class="token punctuation">)</span>        <span class="token keyword">if</span> string <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">return</span> string<span class="token punctuation">.</span>color    <span class="token keyword">def</span> <span class="token function">get_go_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        string <span class="token operator">=</span> self<span class="token punctuation">.</span>_grid<span class="token punctuation">.</span>get<span class="token punctuation">(</span>point<span class="token punctuation">)</span>        <span class="token keyword">if</span> string <span class="token keyword">is</span> None<span class="token punctuation">:</span>            <span class="token keyword">return</span> None        <span class="token keyword">return</span> string</code></pre><pre class=" language-python"><code class="language-python">语法知识补充：这里的get为重写的类中的方法：    我们进入到后文中代码中的get方法：    <span class="token keyword">class</span> <span class="token class-name">Mapping</span><span class="token punctuation">(</span>_Collection<span class="token punctuation">[</span>_KT<span class="token punctuation">]</span><span class="token punctuation">,</span> Generic<span class="token punctuation">[</span>_KT<span class="token punctuation">,</span> _VT_co<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    @overload    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> _KT<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Optional<span class="token punctuation">[</span>_VT_co<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    这里表明get在这里是可以被重写的，我们上面所做的工作就是将这个get方法重写了，返回该点所在的color（如果有的话），没有的话就返回none</code></pre><h3 id="第一个在不在棋盘上通过之前定义的point类中的行和列来进行检验"><a href="#第一个在不在棋盘上通过之前定义的point类中的行和列来进行检验" class="headerlink" title="第一个在不在棋盘上通过之前定义的point类中的行和列来进行检验"></a>第一个在不在棋盘上通过之前定义的point类中的行和列来进行检验</h3><h3 id="b-创建一个落子的方法"><a href="#b-创建一个落子的方法" class="headerlink" title="b. 创建一个落子的方法"></a>b. 创建一个落子的方法</h3><pre class=" language-python"><code class="language-python">     <span class="token keyword">def</span> <span class="token function">place_stone</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> player<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#  由于是落子，所以point是单个棋子</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>is_on_grid<span class="token punctuation">(</span>point<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_grid<span class="token punctuation">.</span>get<span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Illegal play on %s'</span> <span class="token operator">%</span> str<span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>_grid<span class="token punctuation">.</span>get<span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token keyword">is</span> None        <span class="token comment" spellcheck="true"># 0. Examine the adjacent points.</span>        <span class="token comment" spellcheck="true"># 检查该点是否已经有子</span>        adjacent_same_color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 相邻的同颜色的棋子</span>        adjacent_opposite_color <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># 相邻的不同颜色的棋子</span>        liberties <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> point<span class="token punctuation">.</span>neighbors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 通过这个循环来链接棋链，和进行气数的检查</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>is_on_grid<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token comment" spellcheck="true"># 如果不在棋盘上，就终止这次循环</span>            neighbor_string <span class="token operator">=</span> self<span class="token punctuation">.</span>_grid<span class="token punctuation">.</span>get<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 根据自己重写的方法，这里使用只会返回三个值：棋手中的黑白两类，以及none</span>            <span class="token keyword">if</span> neighbor_string <span class="token keyword">is</span> None<span class="token punctuation">:</span>                liberties<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span>            <span class="token keyword">elif</span> neighbor_string<span class="token punctuation">.</span>color <span class="token operator">==</span> player<span class="token punctuation">:</span>                <span class="token keyword">if</span> neighbor_string <span class="token operator">not</span> <span class="token keyword">in</span> adjacent_same_color<span class="token punctuation">:</span>                    adjacent_same_color<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neighbor_string<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> neighbor_string <span class="token operator">not</span> <span class="token keyword">in</span> adjacent_opposite_color<span class="token punctuation">:</span>                    adjacent_opposite_color<span class="token punctuation">.</span>append<span class="token punctuation">(</span>neighbor_string<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 建立由这个点组成的棋链，不单独使用棋子相加，是为了使程序更加拥有通用性</span>        new_string <span class="token operator">=</span> GoString<span class="token punctuation">(</span>player<span class="token punctuation">,</span> <span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">,</span> liberties<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tag::apply_zobrist[]</span>        new_string <span class="token operator">=</span> GoString<span class="token punctuation">(</span>player<span class="token punctuation">,</span> <span class="token punctuation">[</span>point<span class="token punctuation">]</span><span class="token punctuation">,</span> liberties<span class="token punctuation">)</span>  </code></pre><h3 id="我们下面做的就是将棋链棋链之间相连，气相连，棋子相连，这些已经在之前的类中写好了"><a href="#我们下面做的就是将棋链棋链之间相连，气相连，棋子相连，这些已经在之前的类中写好了" class="headerlink" title="我们下面做的就是将棋链棋链之间相连，气相连，棋子相连，这些已经在之前的类中写好了"></a>我们下面做的就是将棋链棋链之间相连，气相连，棋子相连，这些已经在之前的类中写好了</h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">for</span> same_color_string <span class="token keyword">in</span> adjacent_same_color<span class="token punctuation">:</span>          new_string <span class="token operator">=</span> new_string<span class="token punctuation">.</span>merged_with<span class="token punctuation">(</span>same_color_string<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 链接相邻的棋链</span>    <span class="token keyword">for</span> new_string_point <span class="token keyword">in</span> new_string<span class="token punctuation">.</span>stones<span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_grid<span class="token punctuation">[</span>new_string_point<span class="token punctuation">]</span> <span class="token operator">=</span> new_string        <span class="token comment" spellcheck="true"># 使得棋子和棋链互相对应</span>    <span class="token keyword">for</span> other_color_string <span class="token keyword">in</span> adjacent_opposite_color<span class="token punctuation">:</span>          other_color_string<span class="token punctuation">.</span>remove_liberty<span class="token punctuation">(</span>point<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 旁边有棋子就需要移走对应棋子的气</span>    <span class="token keyword">for</span> other_color_string <span class="token keyword">in</span> adjacent_opposite_color<span class="token punctuation">:</span>          <span class="token comment" spellcheck="true"># 这里考虑吃别的棋，却没有考虑自吃的原因是因为，后来我们会对这个特殊的情况进行定义</span>        <span class="token keyword">if</span> other_color_string<span class="token punctuation">.</span>num_liberties <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_remove_string<span class="token punctuation">(</span>other_color_string<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 到这里我们发现我们还没有定义上面的self._remove_string()还没被定义</span></code></pre><h3 id="对没有定义完的方法进行定义"><a href="#对没有定义完的方法进行定义" class="headerlink" title="对没有定义完的方法进行定义"></a>对没有定义完的方法进行定义</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_remove_string</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> point <span class="token keyword">in</span> string<span class="token punctuation">.</span>stones<span class="token punctuation">:</span>        <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> point<span class="token punctuation">.</span>neighbors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>              neighbor_string <span class="token operator">=</span> self<span class="token punctuation">.</span>_grid<span class="token punctuation">.</span>get<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 拿到旁边所在的点</span>            <span class="token keyword">if</span> neighbor_string <span class="token keyword">is</span> None<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            <span class="token keyword">if</span> neighbor_string <span class="token keyword">is</span> <span class="token operator">not</span> string<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 增加旁边点影响的气</span>                neighbor_string<span class="token punctuation">.</span>add_liberty<span class="token punctuation">(</span>point<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_grid<span class="token punctuation">[</span>point<span class="token punctuation">]</span> <span class="token operator">=</span> None</code></pre><h3 id="这里就是对传入的去棋链进行遍历-移除所有它曾经造成的影响-并从定义的棋盘类中将其删除-完成他的删除"><a href="#这里就是对传入的去棋链进行遍历-移除所有它曾经造成的影响-并从定义的棋盘类中将其删除-完成他的删除" class="headerlink" title="这里就是对传入的去棋链进行遍历,移除所有它曾经造成的影响,并从定义的棋盘类中将其删除,完成他的删除"></a>这里就是对传入的去棋链进行遍历,移除所有它曾经造成的影响,并从定义的棋盘类中将其删除,完成他的删除</h3><h3 id="这里还有一个函数检验这个是否是一个相同的棋局"><a href="#这里还有一个函数检验这个是否是一个相同的棋局" class="headerlink" title="这里还有一个函数检验这个是否是一个相同的棋局:"></a>这里还有一个函数检验这个是否是一个相同的棋局:</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> other<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> isinstance<span class="token punctuation">(</span>other<span class="token punctuation">,</span> Board<span class="token punctuation">)</span> <span class="token operator">and</span> \        self<span class="token punctuation">.</span>num_rows <span class="token operator">==</span> other<span class="token punctuation">.</span>num_rows <span class="token operator">and</span> \        self<span class="token punctuation">.</span>num_cols <span class="token operator">==</span> other<span class="token punctuation">.</span>num_cols <span class="token operator">and</span> \        self<span class="token punctuation">.</span>_grid <span class="token operator">==</span> other<span class="token punctuation">.</span>_grid</code></pre><h3 id="检查类和类中的属性是否相同，进而检验，具体使用方法上面已经有所说明"><a href="#检查类和类中的属性是否相同，进而检验，具体使用方法上面已经有所说明" class="headerlink" title="检查类和类中的属性是否相同，进而检验，具体使用方法上面已经有所说明"></a>检查类和类中的属性是否相同，进而检验，具体使用方法上面已经有所说明</h3><hr><h1 id="2-跟踪游戏状态并且检查非法的动作"><a href="#2-跟踪游戏状态并且检查非法的动作" class="headerlink" title="2.跟踪游戏状态并且检查非法的动作"></a>2.跟踪游戏状态并且检查非法的动作</h1><h2 id="1-跟踪游戏状态"><a href="#1-跟踪游戏状态" class="headerlink" title="(1) 跟踪游戏状态"></a>(1) 跟踪游戏状态</h2><h3 id="首先我们要对当前游戏的状态进行储存-定义相应的围棋状态类，从下面的程序可以知道我们要传入board-next-player-previous-move-这几个对象，传入move用来表示传入的点，这个通过对move的属性调用获得"><a href="#首先我们要对当前游戏的状态进行储存-定义相应的围棋状态类，从下面的程序可以知道我们要传入board-next-player-previous-move-这几个对象，传入move用来表示传入的点，这个通过对move的属性调用获得" class="headerlink" title="首先我们要对当前游戏的状态进行储存,定义相应的围棋状态类，从下面的程序可以知道我们要传入board,next_player,previous,move,这几个对象，传入move用来表示传入的点，这个通过对move的属性调用获得"></a>首先我们要对当前游戏的状态进行储存,定义相应的围棋状态类，从下面的程序可以知道我们要传入<code>board</code>,<code>next_player</code>,<code>previous</code>,<code>move</code>,这几个对象，传入<code>move</code>用来表示传入的点，这个通过对<code>move</code>的属性调用获得</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">GameState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">,</span> next_player<span class="token punctuation">,</span> previous<span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>board <span class="token operator">=</span> board        self<span class="token punctuation">.</span>next_player <span class="token operator">=</span> next_player        self<span class="token punctuation">.</span>previous_state <span class="token operator">=</span> previous        self<span class="token punctuation">.</span>last_move <span class="token operator">=</span> move<span class="token comment" spellcheck="true"># 这里的previous的存在相当于一个链表，可以从这里一直指向之前的状态</span></code></pre><h3 id="下面这个用来表示应用步数的移动"><a href="#下面这个用来表示应用步数的移动" class="headerlink" title="下面这个用来表示应用步数的移动"></a>下面这个用来表示应用步数的移动</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">apply_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;1></span>    <span class="token keyword">if</span> move<span class="token punctuation">.</span>is_play<span class="token punctuation">:</span>        next_board <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>board<span class="token punctuation">)</span>        next_board<span class="token punctuation">.</span>place_stone<span class="token punctuation">(</span>self<span class="token punctuation">.</span>next_player<span class="token punctuation">,</span> move<span class="token punctuation">.</span>point<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        next_board <span class="token operator">=</span> self<span class="token punctuation">.</span>board    <span class="token keyword">return</span> GameState<span class="token punctuation">(</span>next_board<span class="token punctuation">,</span> self<span class="token punctuation">.</span>next_player<span class="token punctuation">.</span>other<span class="token punctuation">,</span> self<span class="token punctuation">,</span> move<span class="token punctuation">)</span></code></pre><h3 id="通过对board中的属性进行调用来进行步数的移动，首先对board进行深度复制，在应用place-stone对新的步数进行记录，所有的一切都是通过board中的进行记录，回顾之前的知识，我们可以了解到，为了节约算力，我们通过棋盘对应棋链的字典实现了精简算力"><a href="#通过对board中的属性进行调用来进行步数的移动，首先对board进行深度复制，在应用place-stone对新的步数进行记录，所有的一切都是通过board中的进行记录，回顾之前的知识，我们可以了解到，为了节约算力，我们通过棋盘对应棋链的字典实现了精简算力" class="headerlink" title="通过对board中的属性进行调用来进行步数的移动，首先对board进行深度复制，在应用place_stone对新的步数进行记录，所有的一切都是通过board中的进行记录，回顾之前的知识，我们可以了解到，为了节约算力，我们通过棋盘对应棋链的字典实现了精简算力"></a>通过对<code>board</code>中的属性进行调用来进行步数的移动，首先对<code>board</code>进行深度复制，在应用<code>place_stone</code>对新的步数进行记录，所有的一切都是通过<code>board</code>中的进行记录，回顾之前的知识，我们可以了解到，为了节约算力，我们通过棋盘对应棋链的字典实现了精简算力</h3><h3 id="下面是实现游戏的开始和结束的类"><a href="#下面是实现游戏的开始和结束的类" class="headerlink" title="下面是实现游戏的开始和结束的类"></a>下面是实现游戏的开始和结束的类</h3><pre class=" language-python"><code class="language-python"> @classmethod    <span class="token keyword">def</span> <span class="token function">new_game</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> board_size<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>board_size<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>            board_size <span class="token operator">=</span> <span class="token punctuation">(</span>board_size<span class="token punctuation">,</span> board_size<span class="token punctuation">)</span>        board <span class="token operator">=</span> Board<span class="token punctuation">(</span><span class="token operator">*</span>board_size<span class="token punctuation">)</span>        <span class="token keyword">return</span> GameState<span class="token punctuation">(</span>board<span class="token punctuation">,</span> Player<span class="token punctuation">.</span>black<span class="token punctuation">,</span> None<span class="token punctuation">,</span> None<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可以直接调用GameState.new_game() 棋盘尺寸来获得一个初始的游戏状态类</span><span class="token keyword">def</span> <span class="token function">is_over</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>last_move <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>last_move<span class="token punctuation">.</span>is_resign<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    second_last_move <span class="token operator">=</span> self<span class="token punctuation">.</span>previous_state<span class="token punctuation">.</span>last_move    <span class="token keyword">if</span> second_last_move <span class="token keyword">is</span> None<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token keyword">return</span> self<span class="token punctuation">.</span>last_move<span class="token punctuation">.</span>is_pass <span class="token operator">and</span> second_last_move<span class="token punctuation">.</span>is_pass</code></pre><pre class=" language-python"><code class="language-python">语法知识补充：    board <span class="token operator">=</span> Board<span class="token punctuation">(</span><span class="token operator">*</span>board_size<span class="token punctuation">)</span>    这里可能很多人会疑问为什么要用 <span class="token operator">*</span> ，学过c的同学很有可能把它以为是指针    其实python中并不是这个意思，而且我将说明<span class="token operator">*</span>和<span class="token operator">**</span>用法    注意到我们传入的board_size是一个数组，而我们的Board<span class="token punctuation">(</span><span class="token punctuation">)</span>需要传入两个值，row和cow，即行和列，因此由用法可以推知原理，这个<span class="token operator">*</span>是解包的意思    更标准的说法：函数在调用多个参数时，在列表、元组、集合、字典及其他可迭代对象作为实参，并在前面加 <span class="token operator">*</span>    对于<span class="token operator">**</span>： <span class="token operator">**</span>parameter用于接收类似于关键参数一样赋值的形式的多个实参放入字典中（即把该函数的参数转换为字典）。    我们对第二个举一个例子：    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token operator">**</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> p<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>          demo<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    有一点类似于<span class="token operator">*</span>asgs，<span class="token operator">*</span>argv这个用法</code></pre><h3 id="如果投降，游戏结束，两个人都停一手，游戏结束。"><a href="#如果投降，游戏结束，两个人都停一手，游戏结束。" class="headerlink" title="如果投降，游戏结束，两个人都停一手，游戏结束。"></a>如果投降，游戏结束，两个人都停一手，游戏结束。</h3><h2 id="2-检测非法动作"><a href="#2-检测非法动作" class="headerlink" title="(2) 检测非法动作"></a>(2) 检测非法动作</h2><h3 id="大体上非法动作可能是由于一下原因造成的：落子的位置已经有子，落子导致自己气尽，落子违反劫争规则，我们先避免看起来复杂的后两项。这些都将加在GameState中。"><a href="#大体上非法动作可能是由于一下原因造成的：落子的位置已经有子，落子导致自己气尽，落子违反劫争规则，我们先避免看起来复杂的后两项。这些都将加在GameState中。" class="headerlink" title="大体上非法动作可能是由于一下原因造成的：落子的位置已经有子，落子导致自己气尽，落子违反劫争规则，我们先避免看起来复杂的后两项。这些都将加在GameState中。"></a>大体上非法动作可能是由于一下原因造成的：落子的位置已经有子，落子导致自己气尽，落子违反劫争规则，我们先避免看起来复杂的后两项。这些都将加在<code>GameState</code>中。</h3><h3 id="a-自吃"><a href="#a-自吃" class="headerlink" title="a. 自吃"></a><strong>a. 自吃</strong></h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_move_self_capture</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> player<span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> move<span class="token punctuation">.</span>is_play<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    next_board <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>board<span class="token punctuation">)</span>    next_board<span class="token punctuation">.</span>place_stone<span class="token punctuation">(</span>player<span class="token punctuation">,</span> move<span class="token punctuation">.</span>point<span class="token punctuation">)</span>    new_string <span class="token operator">=</span> next_board<span class="token punctuation">.</span>get_go_string<span class="token punctuation">(</span>move<span class="token punctuation">.</span>point<span class="token punctuation">)</span>    <span class="token keyword">return</span> new_string<span class="token punctuation">.</span>num_liberties <span class="token operator">==</span> <span class="token number">0</span></code></pre><h3 id="这里通过对气数进行判断，返回一个bool值进而判断这一步能否成立"><a href="#这里通过对气数进行判断，返回一个bool值进而判断这一步能否成立" class="headerlink" title="这里通过对气数进行判断，返回一个bool值进而判断这一步能否成立"></a>这里通过对气数进行判断，返回一个bool值进而判断这一步能否成立</h3><h3 id="b-劫争"><a href="#b-劫争" class="headerlink" title="b.劫争"></a><strong>b.劫争</strong></h3><h3 id="不违反劫争的意义就是不能让棋局回到之前的状态"><a href="#不违反劫争的意义就是不能让棋局回到之前的状态" class="headerlink" title="不违反劫争的意义就是不能让棋局回到之前的状态"></a>不违反劫争的意义就是不能让棋局回到之前的状态</h3><pre class=" language-python"><code class="language-python"> @property    <span class="token keyword">def</span> <span class="token function">situation</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>next_player<span class="token punctuation">,</span> self<span class="token punctuation">.</span>board<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">does_move_violate_ko</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> player<span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> move<span class="token punctuation">.</span>is_play<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        next_board <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>self<span class="token punctuation">.</span>board<span class="token punctuation">)</span>        next_board<span class="token punctuation">.</span>place_stone<span class="token punctuation">(</span>player<span class="token punctuation">,</span> move<span class="token punctuation">.</span>point<span class="token punctuation">)</span>        next_situation <span class="token operator">=</span> <span class="token punctuation">(</span>player<span class="token punctuation">.</span>other<span class="token punctuation">,</span> next_board<span class="token punctuation">)</span>        past_state <span class="token operator">=</span> self<span class="token punctuation">.</span>previous_state        <span class="token keyword">while</span> past_state <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            <span class="token keyword">if</span> past_state<span class="token punctuation">.</span>situation <span class="token operator">==</span> next_situation<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            past_state <span class="token operator">=</span> past_state<span class="token punctuation">.</span>previous_state             <span class="token comment" spellcheck="true"># 对这一步有一点小疑问，应该只检查一遍就可以了吧</span>        <span class="token keyword">return</span> <span class="token boolean">False</span></code></pre><h3 id="如果返回False说明正常运行，如果返回True说明运行异常，即违反了劫争规则。"><a href="#如果返回False说明正常运行，如果返回True说明运行异常，即违反了劫争规则。" class="headerlink" title="如果返回False说明正常运行，如果返回True说明运行异常，即违反了劫争规则。"></a>如果返回<code>False</code>说明正常运行，如果返回<code>True</code>说明运行异常，即违反了劫争规则。</h3><h3 id="总结了两种违反规则的方式，我们需要对合法动作进行一个总体的实现，定义一个新的函数，违反规则则不可以落子。"><a href="#总结了两种违反规则的方式，我们需要对合法动作进行一个总体的实现，定义一个新的函数，违反规则则不可以落子。" class="headerlink" title="总结了两种违反规则的方式，我们需要对合法动作进行一个总体的实现，定义一个新的函数，违反规则则不可以落子。"></a>总结了两种违反规则的方式，我们需要对合法动作进行一个总体的实现，定义一个新的函数，违反规则则不可以落子。</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_valid_move</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> self<span class="token punctuation">.</span>is_over<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token comment" spellcheck="true"># 棋局结束，则不能进行回合</span>    <span class="token keyword">if</span> move<span class="token punctuation">.</span>is_pass <span class="token operator">or</span> move<span class="token punctuation">.</span>is_resign<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token comment" spellcheck="true"># 停一手和投降都是有效的一步</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        self<span class="token punctuation">.</span>board<span class="token punctuation">.</span>get<span class="token punctuation">(</span>move<span class="token punctuation">.</span>point<span class="token punctuation">)</span> <span class="token keyword">is</span> None <span class="token operator">and</span>        <span class="token operator">not</span> self<span class="token punctuation">.</span>is_move_self_capture<span class="token punctuation">(</span>self<span class="token punctuation">.</span>next_player<span class="token punctuation">,</span> move<span class="token punctuation">)</span> <span class="token operator">and</span>        <span class="token operator">not</span> self<span class="token punctuation">.</span>does_move_violate_ko<span class="token punctuation">(</span>self<span class="token punctuation">.</span>next_player<span class="token punctuation">,</span> move<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 该点不能有棋子，该点不能违反劫争和自吃</span></code></pre><h2 id="3-终盘"><a href="#3-终盘" class="headerlink" title="3. 终盘"></a>3. 终盘</h2><h3 id="建立agent文件夹，里面判断某个棋局是否有眼"><a href="#建立agent文件夹，里面判断某个棋局是否有眼" class="headerlink" title="建立agent文件夹，里面判断某个棋局是否有眼"></a>建立agent文件夹，里面判断某个棋局是否有眼</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">is_point_an_eye</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> point<span class="token punctuation">,</span> color<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> board<span class="token punctuation">.</span>get<span class="token punctuation">(</span>point<span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;1></span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 不能填死自己的眼</span>    <span class="token keyword">for</span> neighbor <span class="token keyword">in</span> point<span class="token punctuation">.</span>neighbors<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># &lt;2></span>        <span class="token keyword">if</span> board<span class="token punctuation">.</span>is_on_grid<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span><span class="token punctuation">:</span>            neighbor_color <span class="token operator">=</span> board<span class="token punctuation">.</span>get<span class="token punctuation">(</span>neighbor<span class="token punctuation">)</span>            <span class="token keyword">if</span> neighbor_color <span class="token operator">!=</span> color<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">False</span>    <span class="token comment" spellcheck="true"># 如果周围都不是自己的棋子则一定不是眼</span>    friendly_corners <span class="token operator">=</span> <span class="token number">0</span>      off_board_corners <span class="token operator">=</span> <span class="token number">0</span>    corners <span class="token operator">=</span> <span class="token punctuation">[</span>        Point<span class="token punctuation">(</span>point<span class="token punctuation">.</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Point<span class="token punctuation">(</span>point<span class="token punctuation">.</span>row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Point<span class="token punctuation">(</span>point<span class="token punctuation">.</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        Point<span class="token punctuation">(</span>point<span class="token punctuation">.</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> point<span class="token punctuation">.</span>col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token keyword">for</span> corner <span class="token keyword">in</span> corners<span class="token punctuation">:</span>        <span class="token keyword">if</span> board<span class="token punctuation">.</span>is_on_grid<span class="token punctuation">(</span>corner<span class="token punctuation">)</span><span class="token punctuation">:</span>            corner_color <span class="token operator">=</span> board<span class="token punctuation">.</span>get<span class="token punctuation">(</span>corner<span class="token punctuation">)</span>            <span class="token keyword">if</span> corner_color <span class="token operator">==</span> color<span class="token punctuation">:</span>                friendly_corners <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            off_board_corners <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true"># 在棋盘上则判断角点是不是自己的棋子</span>    <span class="token keyword">if</span> off_board_corners <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> off_board_corners <span class="token operator">+</span> friendly_corners <span class="token operator">==</span> <span class="token number">4</span>  <span class="token comment" spellcheck="true"># &lt;4></span>    <span class="token comment" spellcheck="true"># 如果在棋盘边缘，那么需要满足这个条件</span>    <span class="token keyword">return</span> friendly_corners <span class="token operator">>=</span> <span class="token number">3</span>  <span class="token comment" spellcheck="true"># &lt;5></span>    <span class="token comment" spellcheck="true"># 如果不在棋盘边缘，需要满足这个条件</span></code></pre><h3 id="这里对眼的定义还是有缺点"><a href="#这里对眼的定义还是有缺点" class="headerlink" title="这里对眼的定义还是有缺点"></a>这里对眼的定义还是有缺点</h3><h2 id="4-创建第一个机器人"><a href="#4-创建第一个机器人" class="headerlink" title="4. 创建第一个机器人"></a>4. 创建第一个机器人</h2><h3 id="这里我们会学到一些技巧，也就是做一个python包的技巧"><a href="#这里我们会学到一些技巧，也就是做一个python包的技巧" class="headerlink" title="这里我们会学到一些技巧，也就是做一个python包的技巧"></a>这里我们会学到一些技巧，也就是做一个python包的技巧</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;构建一个围棋机器人&quot;&gt;&lt;a href=&quot;#构建一个围棋机器人&quot; class=&quot;headerlink&quot; title=&quot;构建一个围棋机器人&quot;&gt;&lt;/a&gt;构建一个围棋机器人&lt;/h1&gt;&lt;h2 id=&quot;1-表示棋手&quot;&gt;&lt;a href=&quot;#1-表示棋手&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="深度学习与围棋读书笔记" scheme="http://codedetermination.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B8%8E%E5%9B%B4%E6%A3%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>对以后学习的规划和理解</title>
    <link href="http://codedetermination.github.io/2021/04/09/blog2/"/>
    <id>http://codedetermination.github.io/2021/04/09/blog2/</id>
    <published>2021-04-09T07:54:47.000Z</published>
    <updated>2021-04-09T08:27:10.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更清晰的规划，更明确的目标，更强的执行力"><a href="#更清晰的规划，更明确的目标，更强的执行力" class="headerlink" title="更清晰的规划，更明确的目标，更强的执行力"></a>更清晰的规划，更明确的目标，更强的执行力</h1><h2 id="以上三个更连成的一段话是对我新的阶段的新的追求"><a href="#以上三个更连成的一段话是对我新的阶段的新的追求" class="headerlink" title="以上三个更连成的一段话是对我新的阶段的新的追求"></a>以上三个更连成的一段话是对我新的阶段的新的追求</h2><h2 id="迷茫和不知所措可能已经不知不觉之中增加了我自己的压力-并且严重的影响到了我的效率，就像树一样，隔一段时间就要修整枝杈，我也要重新整理下自己的道路和准备从事的方向"><a href="#迷茫和不知所措可能已经不知不觉之中增加了我自己的压力-并且严重的影响到了我的效率，就像树一样，隔一段时间就要修整枝杈，我也要重新整理下自己的道路和准备从事的方向" class="headerlink" title="迷茫和不知所措可能已经不知不觉之中增加了我自己的压力 并且严重的影响到了我的效率，就像树一样，隔一段时间就要修整枝杈，我也要重新整理下自己的道路和准备从事的方向"></a>迷茫和不知所措可能已经不知不觉之中增加了我自己的压力 并且严重的影响到了我的效率，就像树一样，隔一段时间就要修整枝杈，我也要重新整理下自己的道路和准备从事的方向</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="历史使人明智，从一些大公司成功的做法中-我可以从中学到一些经验和教训"><a href="#历史使人明智，从一些大公司成功的做法中-我可以从中学到一些经验和教训" class="headerlink" title="历史使人明智，从一些大公司成功的做法中 我可以从中学到一些经验和教训"></a>历史使人明智，从一些大公司成功的做法中 我可以从中学到一些经验和教训</h2><h2 id="鼎盛时期的摩托罗拉，由于没有确定好自己的方向，并且公司创始人相互传承，纵使在一瞬间里领先了很多，但是还是无法改变被自己过于繁杂的产品线而拖累，最后导致破产，而当时的苹果公司，学会给自己做减法，虽然短暂时间里经历了阵痛，但是从长远来看无疑是最明智的选择。"><a href="#鼎盛时期的摩托罗拉，由于没有确定好自己的方向，并且公司创始人相互传承，纵使在一瞬间里领先了很多，但是还是无法改变被自己过于繁杂的产品线而拖累，最后导致破产，而当时的苹果公司，学会给自己做减法，虽然短暂时间里经历了阵痛，但是从长远来看无疑是最明智的选择。" class="headerlink" title="鼎盛时期的摩托罗拉，由于没有确定好自己的方向，并且公司创始人相互传承，纵使在一瞬间里领先了很多，但是还是无法改变被自己过于繁杂的产品线而拖累，最后导致破产，而当时的苹果公司，学会给自己做减法，虽然短暂时间里经历了阵痛，但是从长远来看无疑是最明智的选择。"></a>鼎盛时期的摩托罗拉，由于没有确定好自己的方向，并且公司创始人相互传承，纵使在一瞬间里领先了很多，但是还是无法改变被自己过于繁杂的产品线而拖累，最后导致破产，而当时的苹果公司，学会给自己做减法，虽然短暂时间里经历了阵痛，但是从长远来看无疑是最明智的选择。</h2><h2 id="将公司与人相比是不现实的，虽然摩托罗拉最后失败了，但是他们都曾经当过胜利者，而对我而言，还远远没有达到卓越的水平，也不敢把自己和这些公司进行简单的类比，但这背后的规律却是显著的，一个公司如果想成功，必然有一些过人的核心竞争力，对于人也是这样，学会了更少人会的东西，就会在竞业中有更明显的优势，而且人和公司一样在一瞬间里不可能过于专注于一切事情。所以对各个事情肯定要进行取舍，划分，排出主次。再有就是手头有的事是最应该也最有必要做好的，也就是对一个来说，首先要保证课内的学习，然后再谈其它的东西，对于我而言，认识到这一点非常有必要，因为我总是觉得自学是很光荣的一件事，但是从某种意义来说，咬定了自学并且上课不认真听讲是一个很浪费时间的事情，有的老师给的经验是必要的，没必要自己再去踩一遍坑，如果觉得应该深入应在课下继续去努力，总之对于我来说，这篇博客相当于对我之前的一些误区进行拨乱反正我决定接下来一段时间主要攻克的方向还是在那个围棋ai和语言本身的进阶上，至于对深度学习的逐步学习我打算按照适合自己的方向去学，也就是先撸项目，再去考虑理论，纵使我理论基础可能相较与别人有差距，但是兴趣毕竟是驱动人的最大动力，尽量降低我的学习压力，提升效果，这一段时间可以先不考虑如何去搞机器人，没有代码能力的话机器人是写不好的，因此我将修改我的个人目标，将其精简，并且以后也这么做。"><a href="#将公司与人相比是不现实的，虽然摩托罗拉最后失败了，但是他们都曾经当过胜利者，而对我而言，还远远没有达到卓越的水平，也不敢把自己和这些公司进行简单的类比，但这背后的规律却是显著的，一个公司如果想成功，必然有一些过人的核心竞争力，对于人也是这样，学会了更少人会的东西，就会在竞业中有更明显的优势，而且人和公司一样在一瞬间里不可能过于专注于一切事情。所以对各个事情肯定要进行取舍，划分，排出主次。再有就是手头有的事是最应该也最有必要做好的，也就是对一个来说，首先要保证课内的学习，然后再谈其它的东西，对于我而言，认识到这一点非常有必要，因为我总是觉得自学是很光荣的一件事，但是从某种意义来说，咬定了自学并且上课不认真听讲是一个很浪费时间的事情，有的老师给的经验是必要的，没必要自己再去踩一遍坑，如果觉得应该深入应在课下继续去努力，总之对于我来说，这篇博客相当于对我之前的一些误区进行拨乱反正我决定接下来一段时间主要攻克的方向还是在那个围棋ai和语言本身的进阶上，至于对深度学习的逐步学习我打算按照适合自己的方向去学，也就是先撸项目，再去考虑理论，纵使我理论基础可能相较与别人有差距，但是兴趣毕竟是驱动人的最大动力，尽量降低我的学习压力，提升效果，这一段时间可以先不考虑如何去搞机器人，没有代码能力的话机器人是写不好的，因此我将修改我的个人目标，将其精简，并且以后也这么做。" class="headerlink" title="将公司与人相比是不现实的，虽然摩托罗拉最后失败了，但是他们都曾经当过胜利者，而对我而言，还远远没有达到卓越的水平，也不敢把自己和这些公司进行简单的类比，但这背后的规律却是显著的，一个公司如果想成功，必然有一些过人的核心竞争力，对于人也是这样，学会了更少人会的东西，就会在竞业中有更明显的优势，而且人和公司一样在一瞬间里不可能过于专注于一切事情。所以对各个事情肯定要进行取舍，划分，排出主次。再有就是手头有的事是最应该也最有必要做好的，也就是对一个来说，首先要保证课内的学习，然后再谈其它的东西，对于我而言，认识到这一点非常有必要，因为我总是觉得自学是很光荣的一件事，但是从某种意义来说，咬定了自学并且上课不认真听讲是一个很浪费时间的事情，有的老师给的经验是必要的，没必要自己再去踩一遍坑，如果觉得应该深入应在课下继续去努力，总之对于我来说，这篇博客相当于对我之前的一些误区进行拨乱反正我决定接下来一段时间主要攻克的方向还是在那个围棋ai和语言本身的进阶上，至于对深度学习的逐步学习我打算按照适合自己的方向去学，也就是先撸项目，再去考虑理论，纵使我理论基础可能相较与别人有差距，但是兴趣毕竟是驱动人的最大动力，尽量降低我的学习压力，提升效果，这一段时间可以先不考虑如何去搞机器人，没有代码能力的话机器人是写不好的，因此我将修改我的个人目标，将其精简，并且以后也这么做。"></a>将公司与人相比是不现实的，虽然摩托罗拉最后失败了，但是他们都曾经当过胜利者，而对我而言，还远远没有达到卓越的水平，也不敢把自己和这些公司进行简单的类比，但这背后的规律却是显著的，一个公司如果想成功，必然有一些过人的核心竞争力，对于人也是这样，学会了更少人会的东西，就会在竞业中有更明显的优势，而且人和公司一样在一瞬间里不可能过于专注于一切事情。所以对各个事情肯定要进行取舍，划分，排出主次。再有就是手头有的事是最应该也最有必要做好的，也就是对一个来说，首先要保证课内的学习，然后再谈其它的东西，对于我而言，认识到这一点非常有必要，因为我总是觉得自学是很光荣的一件事，但是从某种意义来说，咬定了自学并且上课不认真听讲是一个很浪费时间的事情，有的老师给的经验是必要的，没必要自己再去踩一遍坑，如果觉得应该深入应在课下继续去努力，总之对于我来说，这篇博客相当于对我之前的一些误区进行拨乱反正我决定接下来一段时间主要攻克的方向还是在那个围棋ai和语言本身的进阶上，至于对深度学习的逐步学习我打算按照适合自己的方向去学，也就是先撸项目，再去考虑理论，纵使我理论基础可能相较与别人有差距，但是兴趣毕竟是驱动人的最大动力，尽量降低我的学习压力，提升效果，这一段时间可以先不考虑如何去搞机器人，没有代码能力的话机器人是写不好的，因此我将修改我的个人目标，将其精简，并且以后也这么做。</h2><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="对应的深度学习的项目的链接"><a href="#对应的深度学习的项目的链接" class="headerlink" title="对应的深度学习的项目的链接"></a><a href="https://zhuanlan.zhihu.com/p/181089803">对应的深度学习的项目的链接</a></h1><h1 id="并且我打算新增两个读书笔记的专栏"><a href="#并且我打算新增两个读书笔记的专栏" class="headerlink" title="并且我打算新增两个读书笔记的专栏"></a>并且我打算新增两个读书笔记的专栏</h1><h2 id="1-lt-lt-深度学习与围棋-gt-gt"><a href="#1-lt-lt-深度学习与围棋-gt-gt" class="headerlink" title="1. &lt;&lt;深度学习与围棋&gt;&gt;"></a>1. <a href="https://item.jd.com/12797973.html">&lt;&lt;深度学习与围棋&gt;&gt;</a></h2><h2 id="2-lt-lt-流畅的python-gt-gt"><a href="#2-lt-lt-流畅的python-gt-gt" class="headerlink" title="2. &lt;&lt;流畅的python&gt;&gt;"></a>2. <a href="">&lt;&lt;流畅的python&gt;&gt;</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;更清晰的规划，更明确的目标，更强的执行力&quot;&gt;&lt;a href=&quot;#更清晰的规划，更明确的目标，更强的执行力&quot; class=&quot;headerlink&quot; title=&quot;更清晰的规划，更明确的目标，更强的执行力&quot;&gt;&lt;/a&gt;更清晰的规划，更明确的目标，更强的执行力&lt;/h1&gt;&lt;</summary>
      
    
    
    
    
    <category term="学习之路，对博客的理解" scheme="http://codedetermination.github.io/tags/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF%EF%BC%8C%E5%AF%B9%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>博客我来了</title>
    <link href="http://codedetermination.github.io/2021/04/07/blog1/"/>
    <id>http://codedetermination.github.io/2021/04/07/blog1/</id>
    <published>2021-04-07T13:12:28.000Z</published>
    <updated>2021-04-07T13:55:24.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="博客我来了"><a href="#博客我来了" class="headerlink" title="博客我来了"></a>博客我来了</h1><h2 id="我是一名在读的本科生，由于感觉自己如果解决问题之后没有及时进行记录的话，会经常忘记，不仅对知识没有理解（理解只局限与搜索到结果的一刻），这样做不利于长久的提升，而且俗话说：独学而无友则固陋而寡闻，写博客可能会让我认识到更多志同道合的朋友，因此我感觉有写博客的必要了。"><a href="#我是一名在读的本科生，由于感觉自己如果解决问题之后没有及时进行记录的话，会经常忘记，不仅对知识没有理解（理解只局限与搜索到结果的一刻），这样做不利于长久的提升，而且俗话说：独学而无友则固陋而寡闻，写博客可能会让我认识到更多志同道合的朋友，因此我感觉有写博客的必要了。" class="headerlink" title="我是一名在读的本科生，由于感觉自己如果解决问题之后没有及时进行记录的话，会经常忘记，不仅对知识没有理解（理解只局限与搜索到结果的一刻），这样做不利于长久的提升，而且俗话说：独学而无友则固陋而寡闻，写博客可能会让我认识到更多志同道合的朋友，因此我感觉有写博客的必要了。"></a>我是一名在读的本科生，由于感觉自己如果解决问题之后没有及时进行记录的话，会经常忘记，不仅对知识没有理解（理解只局限与搜索到结果的一刻），这样做不利于长久的提升，而且俗话说：独学而无友则固陋而寡闻，写博客可能会让我认识到更多志同道合的朋友，因此我感觉有写博客的必要了。</h2><h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="我记录博客主要的目的如下"><a href="#我记录博客主要的目的如下" class="headerlink" title="我记录博客主要的目的如下"></a>我记录博客主要的目的如下</h1><h2 id="1-是记录自己平常遇到的各种问题减少以后解决问题的时间"><a href="#1-是记录自己平常遇到的各种问题减少以后解决问题的时间" class="headerlink" title="1. 是记录自己平常遇到的各种问题减少以后解决问题的时间"></a>1. 是记录自己平常遇到的各种问题减少以后解决问题的时间</h2><h2 id="2-记录自己的进步，激励的自己的学习"><a href="#2-记录自己的进步，激励的自己的学习" class="headerlink" title="2. 记录自己的进步，激励的自己的学习"></a>2. 记录自己的进步，激励的自己的学习</h2><h2 id="3-为以后遇到这些问题的朋友减少处理时间"><a href="#3-为以后遇到这些问题的朋友减少处理时间" class="headerlink" title="3. 为以后遇到这些问题的朋友减少处理时间"></a>3. 为以后遇到这些问题的朋友减少处理时间</h2><h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1><h1 id="-2"><a href="#-2" class="headerlink" title=""></a></h1><h2 id="同时我记录博客也同样分享下我的生活，记录自己的成长"><a href="#同时我记录博客也同样分享下我的生活，记录自己的成长" class="headerlink" title="同时我记录博客也同样分享下我的生活，记录自己的成长"></a>同时我记录博客也同样分享下我的生活，记录自己的成长</h2><h1 id="-3"><a href="#-3" class="headerlink" title=""></a></h1><h2 id="希望你看到这篇博文后，我们一起努力，共同许下梦想，最终都能有所收获"><a href="#希望你看到这篇博文后，我们一起努力，共同许下梦想，最终都能有所收获" class="headerlink" title="希望你看到这篇博文后，我们一起努力，共同许下梦想，最终都能有所收获"></a>希望你看到这篇博文后，我们一起努力，共同许下梦想，最终都能有所收获</h2><h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h2 id="同时这里可能还会记录下我对一些时事的看法，我会把他们单独归类"><a href="#同时这里可能还会记录下我对一些时事的看法，我会把他们单独归类" class="headerlink" title="同时这里可能还会记录下我对一些时事的看法，我会把他们单独归类"></a>同时这里可能还会记录下我对一些时事的看法，我会把他们单独归类</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;博客我来了&quot;&gt;&lt;a href=&quot;#博客我来了&quot; class=&quot;headerlink&quot; title=&quot;博客我来了&quot;&gt;&lt;/a&gt;博客我来了&lt;/h1&gt;&lt;h2 id=&quot;我是一名在读的本科生，由于感觉自己如果解决问题之后没有及时进行记录的话，会经常忘记，不仅对知识没有理解（理</summary>
      
    
    
    
    
    <category term="对博客的理解" scheme="http://codedetermination.github.io/tags/%E5%AF%B9%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>对python枚举的深入理解</title>
    <link href="http://codedetermination.github.io/2021/04/07/blog0/"/>
    <id>http://codedetermination.github.io/2021/04/07/blog0/</id>
    <published>2021-04-07T09:41:33.000Z</published>
    <updated>2021-04-07T13:11:20.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对Python枚举类深入的理解"><a href="#对Python枚举类深入的理解" class="headerlink" title="对Python枚举类深入的理解"></a>对Python枚举类深入的理解</h1><h2 id="例如"><a href="#例如" class="headerlink" title="例如:"></a>例如:</h2><h3 id="下面这个例子定义了一个玩家的枚举类，但是令人疑惑的是下面的居然出现了self与一个看似为属性的东西做比较，使人感到十分费解。"><a href="#下面这个例子定义了一个玩家的枚举类，但是令人疑惑的是下面的居然出现了self与一个看似为属性的东西做比较，使人感到十分费解。" class="headerlink" title="下面这个例子定义了一个玩家的枚举类，但是令人疑惑的是下面的居然出现了self与一个看似为属性的东西做比较，使人感到十分费解。"></a>下面这个例子定义了一个玩家的枚举类，但是令人疑惑的是下面的居然出现了self与一个看似为属性的东西做比较，使人感到十分费解。</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Player</span><span class="token punctuation">(</span>enum<span class="token punctuation">.</span>Enum<span class="token punctuation">)</span><span class="token punctuation">:</span>    black <span class="token operator">=</span> <span class="token number">1</span>    white <span class="token operator">=</span> <span class="token number">2</span>    @property    <span class="token keyword">def</span> <span class="token function">other</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Player<span class="token punctuation">.</span>black <span class="token keyword">if</span> self <span class="token operator">==</span> Player<span class="token punctuation">.</span>white <span class="token keyword">else</span> Player<span class="token punctuation">.</span>white    <span class="token comment" spellcheck="true"># @property 用来修饰，表明这个方法可以被当做属性来调用</span>    <span class="token comment" spellcheck="true"># 着表示是只读的方法</span></code></pre><h3 id="但是在查阅了官方文档可以知道，这里面的self和Player-black都是成员，而不是属性，这里一定要注意。而且这是定义了一个函数，传入的是成员指针，也应该是函数！"><a href="#但是在查阅了官方文档可以知道，这里面的self和Player-black都是成员，而不是属性，这里一定要注意。而且这是定义了一个函数，传入的是成员指针，也应该是函数！" class="headerlink" title="但是在查阅了官方文档可以知道，这里面的self和Player.black都是成员，而不是属性，这里一定要注意。而且这是定义了一个函数，传入的是成员指针，也应该是函数！"></a>但是在查阅了官方文档可以知道，这里面的<strong>self和Player.black</strong>都是成员，而不是<strong>属性</strong>，这里一定要注意。而且这是定义了一个函数，传入的是成员指针，也应该是函数！</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对Python枚举类深入的理解&quot;&gt;&lt;a href=&quot;#对Python枚举类深入的理解&quot; class=&quot;headerlink&quot; title=&quot;对Python枚举类深入的理解&quot;&gt;&lt;/a&gt;对Python枚举类深入的理解&lt;/h1&gt;&lt;h2 id=&quot;例如&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
    <category term="python进阶" scheme="http://codedetermination.github.io/tags/python%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
</feed>
